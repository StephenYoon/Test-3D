<!DOCTYPE html>
<html>
<head>
<title>My first Three.js app</title>
<style>canvas { width: 100%; height: 100%; background-color: #fff }</style>
</head>
<body>
<script src="lib/three.js"></script>
<script src="lib/Three.js"></script>
<script src="lib/Detector.js"></script>
<script src="lib/Stats.js"></script>
<script src="lib/OrbitControls.js"></script>
<script src="lib/THREEx.KeyboardState.js"></script>
<script src="lib/THREEx.FullScreen.js"></script>
<script src="lib/THREEx.WindowResize.js"></script>
<script src="lib/jquery-1.9.1.js"></script>
<script src="lib/jquery-ui.js"></script>
<script src="lib/helvetiker_regular.typeface.js"></script>

<div id="ThreeJS" style="position: absolute; left:0px; top:0px"></div>

<script>

    // standard global variables
    var container, scene, camera, renderer, controls, stats;
    var keyboard = new THREEx.KeyboardState();
    var clock = new THREE.Clock();
    var DEFAULT_CAMERA_X = 0, DEFAULT_CAMERA_Y = 0, DEFAULT_CAMERA_Z = 25;
    var shapeIndex = 0;
    var shapeColors = [
        new THREE.Color("rgb(255,140,0)"),
        new THREE.Color("rgb(0,255,0)"),
        new THREE.Color("rgb(0,0,255)"),
        new THREE.Color("rgb(255,0,255)"),
        new THREE.Color("rgb(105,105,105)")
    ];

    // custom global variables
    var cube;

    // start the 3D animation
    init();
    animate();

    function init() {
        // initialize values
        var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
        var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;

        // camera
        camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);

        // scene
        scene = new THREE.Scene();
        scene.add(camera);
        camera.position.set(DEFAULT_CAMERA_X, DEFAULT_CAMERA_Y, DEFAULT_CAMERA_Z);
        camera.lookAt(scene.position);

        /*
        var renderer = (window.WebGLRenderingContext) 
            ? new THREE.WebGLRenderer(); // displays your scene using WebGL (utilizes your GPU, more performant)
            : new THREE.CanvasRenderer(); // displays your scene using the (slower) Canvas 2D Context API
        */
        // renderer
        if (Detector.webgl) {
            renderer = new THREE.WebGLRenderer({ antialias: true });
        }
        else {
            renderer = new THREE.CanvasRenderer();
        }
        renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
        container = document.getElementById('ThreeJS');
        container.appendChild(renderer.domElement);

        // controls
        controls = new THREE.OrbitControls(camera, renderer.domElement);

        // create a point light
        var pointLight = new THREE.PointLight(0xFFFFFF);
        pointLight.position.set(10, 20, 20);
        scene.add(pointLight);

        // use wireframe materials to display shape details
        var material1 = new THREE.MeshLambertMaterial({ color: shapeColors[0] });
        var material2 = new THREE.MeshLambertMaterial({ color: shapeColors[1] });
        var material3 = new THREE.MeshLambertMaterial({ color: shapeColors[2] });
        var material4 = new THREE.MeshLambertMaterial({ color: shapeColors[3] });
        var material5 = new THREE.MeshLambertMaterial({ color: shapeColors[4] });
        var wireframeMaterial = new THREE.MeshLambertMaterial({ color: shapeColors[4], wireframe: true, transparent: true });
        var multiMaterial1 = [material1, wireframeMaterial];
        var multiMaterial2 = [material2, wireframeMaterial];
        var multiMaterial3 = [material3, wireframeMaterial];
        var multiMaterial4 = [material4, wireframeMaterial];
        var multiShelfMaterial = [material5, wireframeMaterial];

        // create the cube
        // CubeGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)
        var geometry = new THREE.CubeGeometry(1, 2, 3);

        // Shelf 1 - box 1
        var shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial1);
        shape.position.set(0, 0, 0);
        scene.add(shape);

        // Shelf 1 - box 2
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial2);
        shape.position.set(1, 0, 0);
        scene.add(shape);

        // Shelf 1 - box 3
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(2, 2, 3, 0, 0, 0), multiMaterial3);
        shape.position.set(2.5, 0, 0);
        scene.add(shape);

        // Shelf 1 - box 4
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 2, 0, 0, 0), multiMaterial4);
        shape.position.set(4, 0, 0.5);
        scene.add(shape);

        // Shelf 1
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(6, 0.5, 3, 0, 0, 0), multiShelfMaterial);
        shape.position.set(2.5, -1.25, 0);
        scene.add(shape);


        // Shelf 2 - box 1
        var shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial3);
        shape.position.set(0, -4, 0);
        scene.add(shape);

        // Shelf 2 - box 2
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial3);
        shape.position.set(1, -4, 0);
        scene.add(shape);

        // Shelf 2 - box 3
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial1);
        shape.position.set(2, -4, 0);
        scene.add(shape);

        // Shelf 2 - box 4
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(2, 2, 2, 0, 0, 0), multiMaterial2);
        shape.position.set(3.5, -4, 0.5);
        scene.add(shape);

        // Shelf 2
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(6, 0.5, 3, 0, 0, 0), multiShelfMaterial);
        shape.position.set(2.5, -5.25, 0);
        scene.add(shape);




        // Shelf 3 - box 1
        var shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial2);
        shape.position.set(-6, 0, 0);
        scene.add(shape);

        // Shelf 3 - box 2
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial2);
        shape.position.set(-5, 0, 0);
        scene.add(shape);

        // Shelf 3 - box 3
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(2, 2, 3, 0, 0, 0), multiMaterial3);
        shape.position.set(-3.5, 0, 0);
        scene.add(shape);

        // Shelf 3 - box 4
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 2, 0, 0, 0), multiMaterial1);
        shape.position.set(-2, 0, 0.5);
        scene.add(shape);

        // Shelf 3
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(6, 0.5, 3, 0, 0, 0), multiShelfMaterial);
        shape.position.set(-3.5, -1.25, 0);
        scene.add(shape);


        // Shelf 4 - box 1
        var shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial1);
        shape.position.set(-6, -4, 0);
        scene.add(shape);

        // Shelf 4 - box 2
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 3, 0, 0, 0), multiMaterial2);
        shape.position.set(-5, -4, 0);
        scene.add(shape);

        // Shelf 4 - box 3
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(2, 2, 2, 0, 0, 0), multiMaterial1);
        shape.position.set(-3.5, -4, 0.5);
        scene.add(shape);

        // Shelf 4 - box 4
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(1, 2, 2, 0, 0, 0), multiMaterial4);
        shape.position.set(-2, -4, 0.5);
        scene.add(shape);

        // Shelf 4
        shape = THREE.SceneUtils.createMultiMaterialObject(new THREE.CubeGeometry(6, 0.5, 3, 0, 0, 0), multiShelfMaterial);
        shape.position.set(-3.5, -5.25, 0);
        scene.add(shape);
    }

    function animate() {
        requestAnimationFrame(animate);
        update();
        render();
    }

    function update() {
        if (keyboard.pressed('up')) {
            camera.position.y++;
        }
        else if (keyboard.pressed('down')) {
            camera.position.y--;
        }
        else if (keyboard.pressed('left')) {
            camera.position.x--;
        }
        else if (keyboard.pressed('right')) {
            camera.position.x++;
        }
        else if (keyboard.pressed('pageup')) {
            camera.position.z--;
        }
        else if (keyboard.pressed('pagedown')) {
            camera.position.z++;
        }
        else if (keyboard.pressed('h')) {
            setTimeout(function () {
                resetShapeColors();
                scene.children[shapeIndex + 2].children[0].material.color.setRGB(255, 255, 0);
                shapeIndex++;
                if (shapeIndex > 4) { shapeIndex = 0; }
            }, 1000);
        }
        else if (keyboard.pressed('space')) {
            camera.position.x = DEFAULT_CAMERA_X;
            camera.position.y = DEFAULT_CAMERA_Y;
            camera.position.z = DEFAULT_CAMERA_Z;
        }

        controls.update();
    }

    function resetShapeColors() {
        scene.children[2].children[0].material.color.set(shapeColors[0]);
        scene.children[3].children[0].material.color.set(shapeColors[1]);
        scene.children[4].children[0].material.color.set(shapeColors[2]);
        scene.children[5].children[0].material.color.set(shapeColors[3]);
        scene.children[6].children[0].material.color.set(shapeColors[4]);
    }

    function render() {
        renderer.render(scene, camera);
    }

</script>
</body>
</html>